QUERY- create department table;
CREATE TABLE dept123 (
    dept_id NUMBER PRIMARY KEY,
    dept_name VARCHAR2(50) NOT NULL
    );



QUERY- create employees table;
CREATE TABLE employee53 (
    emp_id NUMBER PRIMARY KEY,
    emp_name VARCHAR2(50) NOT NULL,
    dept_id NUMBER,
    FOREIGN KEY (dept_id) REFERENCES dept123(dept_id)
);



QUERY- insert dat in dept table ; 
INSERT INTO dept123 (dept_id, dept_name) VALUES (1, 'Human Resources');
INSERT INTO dept123 (dept_id, dept_name) VALUES (2, 'Finance');
INSERT INTO dept123 (dept_id, dept_name) VALUES (3, 'IT');
INSERT INTO dept123 (dept_id, dept_name) VALUES (4, 'Marketing');



QUERY - insert data in employees table ;
INSERT INTO employee53 (emp_id, emp_name, dept_id) VALUES (1, 'John Doe', 1);
INSERT INTO employee53 (emp_id, emp_name, dept_id) VALUES (2, 'Jane Smith', 2);
INSERT INTO employee53 (emp_id, emp_name, dept_id) VALUES (3, 'Alice Johnson', 3);
INSERT INTO employee53 (emp_id, emp_name, dept_id) VALUES (4, 'Bob Brown', 1);
INSERT INTO employee53 (emp_id, emp_name, dept_id) VALUES (5, 'Emily Davis', 4);

QUERY- alter table ;
ALTER TABLE employee53
ADD email VARCHAR2(100);


QUERY- select people where dept id is 1 ;
SELECT * FROM employee53
WHERE dept_id = 1;


QUERY- to find employees whose names stars with a; (LIKE)
SELECT * FROM employee53
WHERE emp_name LIKE 'A%';

QUERY- you could find employees with IDs between 1 and 5;(BETWEEN)
SELECT * FROM employee53
WHERE emp_id BETWEEN 1 AND 5;


QUERY- To select employees in either department 1 or 3: (IN)
SELECT * FROM employee53
WHERE dept_id IN (1, 3);


QUERY- To find employees who do not have an email address:(NULL)
SELECT * FROM employee53
WHERE email IS NULL;


QUERY- To select all employees in department ID 1 and order them by their names:(ORDER BY)
SELECT * FROM employee53
WHERE dept_id = 1
ORDER BY emp_name;

QUERY- alias name for column (ALIAS)
SELECT emp_name AS employee_name
FROM employee53;

QUERY- alias name for table (ALIAS)
SELECT e.emp_name, e.dept_id
FROM employee53 e;
 
QUERY- alter table and create new column salary 
ALTER TABLE employee53
ADD salary NUMBER;

QUERY- salaries for employees 
UPDATE employee53 SET salary = 50000 WHERE emp_id = 1;
UPDATE employee53 SET salary = 60000 WHERE emp_id = 2;
UPDATE employee53 SET salary = 70000 WHERE emp_id = 3;
UPDATE employee53 SET salary = 55000 WHERE emp_id = 4;
UPDATE employee53 SET salary = 65000 WHERE emp_id = 5;
UPDATE employee53 SET salary = 72000 WHERE emp_id = 6;
UPDATE employee53 SET salary = 48000 WHERE emp_id = 7;
UPDATE employee53 SET salary = 60000 WHERE emp_id = 8;
UPDATE employee53 SET salary = 62000 WHERE emp_id = 9;
UPDATE employee53 SET salary = 75000 WHERE emp_id = 10;
UPDATE employee53 SET salary = 55000 WHERE emp_id = 11;
UPDATE employee53 SET salary = 50000 WHERE emp_id = 12;
UPDATE employee53 SET salary = 63000 WHERE emp_id = 13;
UPDATE employee53 SET salary = 68000 WHERE emp_id = 14;
UPDATE employee53 SET salary = 72000 WHERE emp_id = 15;

QUERY-update salary 
UPDATE employee53
SET salary = salary * 1.10;

QUERY- If you want to get more information, like the total salary per department, you could modify the QUERY like this:(GROUP BY)
SELECT dept_id, COUNT(*) AS employee_count, SUM(salary) AS total_salary
FROM employee53
GROUP BY dept_id;

QUERY-To retrieve department IDs where the count of employees is greater than 3, you can use the HAVING clause in conjunction with the GROUP BY clause. Here’s how you can do it:(HAVING)
SELECT dept_id, COUNT(*) AS employee_count
FROM employee53
GROUP BY dept_id
HAVING COUNT(*) > 3;

QUERY-et’s say you want to find the dept_id of departments that have more than 3 employees. You can use a nested query to achieve this. Here’s how you can do it:(NESTED QUERY)

SELECT dept_id
FROM employee53
WHERE dept_id IN (
    SELECT dept_id
    FROM employee53
    GROUP BY dept_id
    HAVING COUNT(*) > 3
);


QUERY- UPDATE THE SALARY OF EMPLOYEE BY 1000
UPDATE employee53
SET salary = salary + 1000;

QUERY- Example: Update Employee Salaries Using a Join
UPDATE employee53 e
SET e.salary = e.salary + 1000
WHERE e.dept_id IN (
    SELECT d.dept_id
    FROM dept123 d
    WHERE d.dept_id = 1 
);

QUERY- Example: Update Employee Salaries with a Self Join
UPDATE employee53 e1
SET e1.salary = e1.salary + 1000
WHERE e1.salary < (
    SELECT AVG(e2.salary)
    FROM employee53 e2
    WHERE e2.dept_id = e1.dept_id
);

QUERY-(CROSS JOIN)

 Example: Updating Salaries Based on a CROSS JOIN Condition
Suppose you want to give a raise to all employees who belong to a specific department but also want to utilize CROSS JOIN to demonstrate how it works in the context of your data. You could set up a condition where we assume each department has a specific raise amount.

Create a Temporary Raise Table: For the sake of the example, let's assume we have a raise structure.


-- Create a temporary raise table for demonstration
CREATE TABLE raise_structure (
    dept_id NUMBER,
    raise_amount NUMBER
);

-- Insert some example raise amounts
INSERT INTO raise_structure (dept_id, raise_amount) VALUES (1, 2000);
INSERT INTO raise_structure (dept_id, raise_amount) VALUES (2, 1500);
INSERT INTO raise_structure (dept_id, raise_amount) VALUES (3, 1000);


Using CROSS JOIN to Update Salaries: Now, let’s write an UPDATE statement using CROSS JOIN.
UPDATE employee53 e
SET e.salary = e.salary + (
    SELECT r.raise_amount
    FROM raise_structure r
    WHERE r.dept_id = e.dept_id
)
WHERE e.dept_id IN (SELECT dept_id FROM raise_structure);



QUERY-  create product table 
CREATE TABLE product_5053 (
    product_id NUMBER PRIMARY KEY,
    p_name VARCHAR2(100) NOT NULL,
    price NUMBER(10, 2) NOT NULL,
    category VARCHAR2(50) NOT NULL
);

QUERY- INSERT DATA 
INSERT INTO product_5053 (product_id, p_name, price, category) VALUES (1, 'Laptop', 799.00, 'Electronics');
INSERT INTO product_5053 (product_id, p_name, price, category) VALUES (2, 'Smartphone', 499.00, 'Electronics');
INSERT INTO product_5053 (product_id, p_name, price, category) VALUES (3, 'Coffee Maker', 89.00, 'Home & Kitchen');
INSERT INTO product_5053 (product_id, p_name, price, category) VALUES (4, 'Desk Chair', 149.00, 'Furniture');
INSERT INTO product_5053 (product_id, p_name, price, category) VALUES (5, 'Bluetooth Speaker', 59.00, 'Electronics');
INSERT INTO product_5053 (product_id, p_name, price, category) VALUES (6, 'Running Shoes', 120.00, 'Sports');
INSERT INTO product_5053 (product_id, p_name, price, category) VALUES (7, 'Air Conditioner', 499.00, 'Appliances');
INSERT INTO product_5053 (product_id, p_name, price, category) VALUES (8, 'Jacket', 75.00, 'Clothing');
INSERT INTO product_5053 (product_id, p_name, price, category) VALUES (9, 'Digital Camera', 350.00, 'Electronics');
INSERT INTO product_5053 (product_id, p_name, price, category) VALUES (10, 'Microwave', 120.00, 'Appliances');


QUERY- create works table
CREATE TABLE works (
    empid NUMBER PRIMARY KEY,
    company_name VARCHAR2(100) NOT NULL,
    salary NUMBER(10, 2) NOT NULL
);

 QUERY- insert data
INSERT INTO works (empid, company_name, salary) VALUES (1, 'TechCorp', 85000.00);
INSERT INTO works (empid, company_name, salary) VALUES (2, 'Innovative Solutions', 72000.50);
INSERT INTO works (empid, company_name, salary) VALUES (3, 'Global Enterprises', 95000.00);

QUERY- TO FIND AVERAGE SALARY 
SELECT AVG(salary) AS average_salary
FROM works;

QUERY- CREATE DEPARTMENTS TABLE 
CREATE TABLE department (
    dept_id NUMBER PRIMARY KEY,
    dept_name VARCHAR2(100) NOT NULL,
    location VARCHAR2(100)
);

QUERY- Modify the works table by adding columns 
ALTER TABLE works
ADD (
    dept_name VARCHAR2(100),
    location VARCHAR2(100)
);

QUERY- If you want to normalize, modify the works table to add dept_id
ALTER TABLE works
ADD (
    dept_id NUMBER
);

QUERY- Optionally, you can add a foreign key constraint to enforce referential integrity:
ALTER TABLE works
ADD CONSTRAINT fk_dept
FOREIGN KEY (dept_id) REFERENCES department(dept_id);

QUERY- Insert records into the department table:
INSERT INTO department (dept_id, dept_name, location) VALUES (1, 'Engineering', 'New York');
INSERT INTO department (dept_id, dept_name, location) VALUES (2, 'Sales', 'Chicago');
INSERT INTO department (dept_id, dept_name, location) VALUES (3, 'Marketing', 'San Francisco');

QUERY- JOIN TABLES WORKS AND DEPRATMENT TABLES 
SELECT w.empid, w.company_name, w.salary, d.dept_name, d.location
FROM works w
JOIN departments d ON w.dept_id = d.dept_id;

QUERY- UPDATE WORKS TABLE 
UPDATE works
SET dept_id = 1
WHERE empid = 1;  -- Assigning department ID 1 (e.g., Engineering) to employee with empid 1

UPDATE works
SET dept_id = 2
WHERE empid = 2;  -- Assigning department ID 2 (e.g., Sales) to employee with empid 2

UPDATE works
SET dept_id = 3
WHERE empid = 3;  -- Assigning department ID 3 (e.g., Marketing) to employee with empid 3


QUERY - To create a books table with the specified columns — id, title, author, genre, price, and publish_year
CREATE TABLE books (
    id NUMBER PRIMARY KEY,         
    title VARCHAR2(255) NOT NULL,  
    author VARCHAR2(100) NOT NULL, 
    genre VARCHAR2(50),            
    price NUMBER(10, 2),           
    publish_year NUMBER(4)         
);


QUERY-  insert some sample data

INSERT INTO books (id, title, author, genre, price, publish_year)
VALUES (1, 'To Kill a Mockingbird', 'Harper Lee', 'Fiction', 15.99, 1960);

INSERT INTO books (id, title, author, genre, price, publish_year)
VALUES (2, '1984', 'George Orwell', 'Dystopian', 12.99, 1949);

INSERT INTO books (id, title, author, genre, price, publish_year)
VALUES (3, 'The Great Gatsby', 'F. Scott Fitzgerald', 'Classic', 10.99, 1925);

INSERT INTO books (id, title, author, genre, price, publish_year)
VALUES (4, 'The Catcher in the Rye', 'J.D. Salinger', 'Fiction', 14.99, 1951);

INSERT INTO books (id, title, author, genre, price, publish_year)
VALUES (5, 'Moby-Dick', 'Herman Melville', 'Adventure', 18.50, 1851);


QUERY- To create a cinema table with the columns movie_name, genre, release_date, and ratings

CREATE TABLE cinema (
    movie_name VARCHAR2(255) NOT NULL,   
    genre VARCHAR2(50),                   
    release_date DATE,                     
    ratings NUMBER(3, 1)                 
);

QUERY - you can insert some sample movie data
INSERT INTO cinema (movie_name, genre, release_date, ratings)
VALUES ('Inception', 'Science Fiction', TO_DATE('2010-07-16', 'YYYY-MM-DD'), 8.8);

INSERT INTO cinema (movie_name, genre, release_date, ratings)
VALUES ('The Dark Knight', 'Action', TO_DATE('2008-07-18', 'YYYY-MM-DD'), 9.0);

INSERT INTO cinema (movie_name, genre, release_date, ratings)
VALUES ('The Shawshank Redemption', 'Drama', TO_DATE('1994-09-22', 'YYYY-MM-DD'), 9.3);

INSERT INTO cinema (movie_name, genre, release_date, ratings)
VALUES ('The Godfather', 'Crime', TO_DATE('1972-03-24', 'YYYY-MM-DD'), 9.2);

INSERT INTO cinema (movie_name, genre, release_date, ratings)
VALUES ('The Matrix', 'Action', TO_DATE('1999-03-31', 'YYYY-MM-DD'), 8.7);



QUERY- To select movie names from the cinema table where the ratings are greater than 7 and less than 9
SELECT movie_name
FROM cinema
WHERE ratings > 7 AND ratings < 9;


QUERY- CREATE TABLE statement for the table with the desired columns (emp_id, emp_name, dept_name, and timings)
CREATE TABLE employee_details (
    emp_id NUMBER PRIMARY KEY,              -- Unique employee ID (Primary Key)
    emp_name VARCHAR2(100) NOT NULL,         -- Employee name (required)
    dept_name VARCHAR2(100),                 -- Department name (optional)
    timings VARCHAR2(20) CHECK (timings IN ('Full-Time', 'Part-Time')) -- Employee timings (restricted to Full-Time or Part-Time)
);

QUERY-insert data
INSERT INTO employee_details (emp_id, emp_name, dept_name, timings)
VALUES (1, 'John Doe', 'Engineering', 'Full-Time');

INSERT INTO employee_details (emp_id, emp_name, dept_name, timings)
VALUES (2, 'Jane Smith', 'Marketing', 'Part-Time');

INSERT INTO employee_details (emp_id, emp_name, dept_name, timings)
VALUES (3, 'Michael Johnson', 'Finance', 'Full-Time');

INSERT INTO employee_details (emp_id, emp_name, dept_name, timings)
VALUES (4, 'Emily Davis', 'HR', 'Part-Time');

INSERT INTO employee_details (emp_id, emp_name, dept_name, timings)
VALUES (5, 'Chris Lee', 'Engineering', 'Full-Time');


QUERY- To select people from the employee_details table who are working only part-time,
SELECT emp_id, emp_name, dept_name, timings
FROM employee_details
WHERE timings = 'Part-Time';




















